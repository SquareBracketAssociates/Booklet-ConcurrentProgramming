
!! About Delay

The class ==Delay== is a central class of Pharo kernel. 
Typical needs for using delays are:
- repeat an action every x milliseconds,
- wait a given amount of time before executing an action. 

This class requires 

!!! The class Delay


In case you need to pause execution for some time, you can use ""Delay"".

Delays can be instantiated and set up by sending ==forSeconds:== or ==forMilliseconds:== to the class ==Delay== and executed by sending it ==wait== message.

For example:
[[[
| delay |
delay := Delay forSeconds: 3.
[ 1 to: 10 do: [:i |
  Transcript show: i printString ; cr.
  delay wait ] ] fork
]]]
will print a number every 3 seconds.

Delays suspend the execution of a thread during a precise duration. The thread is then in suspended state.

!!! Example
The following snippet schedules two processes each of which will display a different message with a  different rate.

[[[
[ 10 timesRepeat: [ 
	'ping' crTrace. 
	(Delay forMilliseconds: 300) wait ] 
	] forkAt: Processor userBackgroundPriority.
	  
[ 10 timesRepeat: [ 
	'PONG' crTrace. 
	(Delay forMilliseconds: 100) wait]
	] forkAt: Processor userBackgroundPriority.
]]]

It produces: 

[[[
ping  PONG  PONG  PONG  ping  PONG  PONG  PONG  ping  PONG  PONG  PONG  ping  PONG  ping  ping  ping  ping  ping  ping 
]]]


!!! Delay specific scheduler



!!! Implementation
The class ==Delay== is complex because when a Pharo image is saved and restarted, running delays should be adapted. 
A delay in progress when an image snapshots is suspended and resumed when the snapshot is re-started.
i.e., from the image perspective of timing, the image snapshot never happened.
We will not cover this. 

[[[
Delay class >> forMilliseconds: aNumber
	"Return a new Delay for the given number of milliseconds. 
	Sending 'wait' to this Delay will cause the sender's process to be 
	suspended for approximately that length of time."

	^ self new setDelay: aNumber forSemaphore: Semaphore new
]]]

[[[
Delay >> setDelay: milliseconds forSemaphore: aSemaphore
	"Private! Initialize this delay to signal the given semaphore after the given number of milliseconds."

	millisecondDelayDuration := milliseconds asInteger.
	millisecondDelayDuration < 0 ifTrue: [self error: 'delay times cannot be negative'].
	delaySemaphore := aSemaphore.
	beingWaitedOn := false.
]]]

A delay has 
- a boolean (==beingWaitedOn==) expressing whether users sent it the message ==wait==.
- a semaphore that is used by the delay scheduler to make sure that the delay will be sleeping and waken up on time. 

For example the message ==wait== of the class ==Delay== schedules the delay, and make the delay waiting.
[[[
Delay >> wait
	"Schedule this Delay, then wait on its semaphore. The current process will be suspended for the amount of time specified when this Delay was created."

	self schedule.
	[ delaySemaphore wait ] ifCurtailed: [ self unschedule ]
]]]

The delay scheduler will then signal this semaphore when needed sending the private message ==timingPrioritySignalExpired==.

[[[
Delay >> timingPrioritySignalExpired
	"The delay time has elapsed; signal the waiting process."

	beingWaitedOn := false.
	delaySemaphore signal.
]]]

!!! Conclusion
