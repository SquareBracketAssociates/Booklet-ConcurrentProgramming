'From Squeak5.3beta of 26 December 2019 [latest update: #19295] on 10 January 2020 at 1:53:50 pm'!LinkedList subclass: #Mutex	instanceVariableNames: 'owner'	classVariableNames: ''	poolDictionaries: ''	category: 'Kernel-Processes'!!Mutex commentStamp: 'eem 1/7/2016 11:36' prior: 0!A Mutex is a light-weight MUTual EXclusion object being used when two or more processes need to access a shared resource concurrently. A Mutex grants ownership to a single process and will suspend any other process trying to aquire the mutex while in use. Waiting processes are granted access to the mutex in the order the access was requested.A Mutex allows the owning process to reenter as many times as desired.  For example a Mutex will not block when trying the following:	| m |	m := Mutex new.	m critical: [m critical: [#yes]]whereas a Semaphore will deadlock:	| s |	s := Semaphore forMutualExclusion.	s critical: [s critical: [#no]]Instance variables:	owner		<Process|UndefinedObject>		The process owning the mutex!!Mutex methodsFor: 'mutual exclusion' stamp: 'eem 1/7/2016 11:41'!critical: aBlock	"Evaluate aBlock protected by the receiver."	<criticalSection>	^self primitiveEnterCriticalSection		ifTrue: [aBlock value]		ifFalse: [aBlock ensure: [self primitiveExitCriticalSection]]! !!Mutex methodsFor: 'mutual exclusion' stamp: 'eem 1/7/2016 12:10'!critical: aBlock ifLocked: lockedBlock	"Answer the evaluation of aBlock protected by the receiver.  If it is already in a critical	 section on behalf of some other process answer the evaluation of lockedBlock."	<criticalSection>	^self primitiveTestAndSetOwnershipOfCriticalSection		ifNil: [lockedBlock value]		ifNotNil:			[:alreadyOwner|			 alreadyOwner				ifTrue: [aBlock value]				ifFalse: [aBlock ensure: [self primitiveExitCriticalSection]]]! !!Mutex methodsFor: 'private-primitives' stamp: 'eem 1/5/2016 09:00'!primitiveEnterCriticalSection	"Primitive. The receiver must be unowned or owned by the current process to proceed.	 Answer if the process is owned by the current process.	 Copyright (c) 2016 - 3D Immersive Collaboration Consulting, LLC."	<primitive: 186>	self primitiveFailed	"In the spirit of the following"	"[owner ifNil:		[owner := Processor activeProcess.		 ^false].	  owner = Processor activeProcess ifTrue:		[^true].	  self addLast: Processor activeProcess.	  Processor activeProcess suspend] valueUnpreemptively"! !!Mutex methodsFor: 'private-primitives' stamp: 'eem 1/5/2016 09:00'!primitiveExitCriticalSection	"Primitive. Set the receiver to unowned and if any processes are waiting on	 the receiver then proceed the first one, indicating that the receiver is unowned.	 Copyright (c) 2016 - 3D Immersive Collaboration Consulting, LLC."	<primitive: 185>	self primitiveFailed	"In the spirit of the following"	"[owner := nil.	  self isEmpty ifFalse:		[process := self removeFirst.		 process resume]] valueUnpreemptively"! !!Mutex methodsFor: 'private-primitives' stamp: 'bf 9/15/2016 18:18'!primitiveTestAndSetOwnershipOfCriticalSection	"Primitive. Attempt to set the ownership of the receiver.	 If the receiver is unowned set its owningProcess to the	 activeProcess and answer false.  If the receiver is owned	 by the activeProcess answer true.  If the receiver is owned	 by some other process answer nil.	 Copyright (c) 2016 - 3D Immersive Collaboration Consulting, LLC."	<primitive: 187>	self primitiveFailed	"In the spirit of the following"	"[owner ifNil:		[owningProcess := Processor activeProcess.		 ^false].	  owner = Processor activeProcess ifTrue: [^true].	  ^nil] valueUnpreemptively"! !!Mutex methodsFor: 'system simulation' stamp: 'eem 3/30/2017 15:44'!primitiveEnterCriticalSectionOnBehalfOf: effectiveProcess	"Primitive. Simulate primitiveEnterCriticalSection.  The receiver	 must be unowned or owned by the effectiveProcess to proceed.	 Answer if the process is already owned by the current process."	<primitive: 186>	^Context primitiveFailTokenFor: nil! !!Mutex methodsFor: 'system simulation' stamp: 'eem 3/30/2017 15:44'!primitiveTestAndSetOwnershipOfCriticalSectionOnBehalfOf: effectiveProcess	"Primitive. Simulate primitiveEnterCriticalSection.  Attempt to set the ownership	 of the receiver.  If the receiver is unowned set its owningProcess to the	 effectiveProcess and answer false.  If the receiver is owned by the effectiveProcess	 answer true.  If the receiver is owned by some other process answer nil."	<primitive: 187>	^Context primitiveFailTokenFor: nil! !!Mutex methodsFor: 'testing' stamp: 'eem 7/26/2018 20:32'!isOwned	"Answer if the receiver is owned.  DO NOT USE THIS IN NORMAL CODE.	 This exists for the MutexTests so they don't have to use e.g. instVarNamed:.	 N.B. don't use notNil because that is a real send and preemptable."	^nil ~~ owner! !